#+title: fulcro primer part 1 
#+roam_tags:

Related: [[file:fulcro.org][fulcro]] [[file:clojurescript.org][Clojurescript]] [[file:blog_posts.org][blog posts]]

* Todos
- [X] Create basic structure with nested defsc
- [ ] Hard-code :initial-state with 1 item and multiple items
- [ ] Pass :initial-state with params
- [ ] Show how queries work with nested structure
- [ ] Consider adding extensive comments to the code in fulcro-primer
- [ ] Setup simple fulcro-primer-template
- [ ] Explain how to put data into app-db
  - [ ] with defsc and "manually" (if possible)
- [ ] Explain how to query stuff from the app-db
  - [ ]manually, at the repl, with the fulcro inspector

* Fulcro Primer: Part 1

This series of articles is designed to be an introduction to the core concepts
of Fulcro which I wish I'd had when starting out exploring the library. While
Fulcro's documentation is one of the most comprehensive for any library I've
worked with, it's aimed at developers who have some experience developing
React-based Single Page Applications (SPAs) and can be a little intimidating if
you're not already familiar with the core concepts. I'm hoping that if you're
just starting your Fulcro journey, these posts will help you get started more
quickly and with more confidence.

TL;DR - skip forward to the section "The Fulcro Application Database" to jump
straight to the details.

* Background

In the Clojure(script) world we're spoiled with great wrapper libraries for
React: Reagent, Fulcro, Re-frame, Keechma, Rum (just to name a few). Each of
these libraries have their own approach to providing an interface to React
components from the very minimal (like Rum) to fully-featured (like Fulcro).

I was initially drawn to Re-Frame as it has a fairly straight-forward approach
for managing application state and is built on the already great Reagent
library. While Re-Frame is great for front-end work, integrating Re-Frame
applications with a database backend was left as "an exercise for the reader".
Distributed applications are notoriously tricky to get right, and I wasn't
confident that I had the experience to implement a reliable back-end for the
types of applications I wanted to develop in Re-Frame. I went searching for a
project that had a full-stack data-base story and I found one in Fulcro.

* Enter Fulcro

I had heard some good things about Fulcro and after skimming the excellent docs,
I decided to go in for a deeper dive. Fulcro has been around in some form or
another since Dec 2013 and it has evolved to cover most of what you'd need to
implement full-stack database-driven web apps. Most interesting for me was that
Fulcro had what appeared to be a great "full-stack story" which meant that
someone smarter than me had figured out how to get Fulcro to reliably talk to
database backends. It turns out that Fulcro provides much more than just a good
full-stack story but understanding how all these pieces fit together can be
quite a challenge.

* The Fulcro Application Database

While both Re-Frame and Fulcro are designed help create single page
applications, these two frameworks take a different approach to state
management. Coming from Re-Frame, I had many pre-conceived notions of how Fulcro
worked and this made it challenging for me to get a handle on the framework. I'm
hoping that this primer will help you avoid these same "conceptual errors" and
get up and running with Fulcro more quickly.

Both Re-Frame and Fulcro use a client-side "application database" (or "app-db") to
organize your application's data. In a Re-Frame application, you define the
structure of the application database and you use subscriptions to get data from
the app-db into components. In Re-Frame, each component is responsible for
getting it's data via subscriptions.
 
Fulcro takes a different approach; the structure of Fulcro's app-db is largely
defined by the components in your UI and the app-db is entirely managed by
Fulco. In a Fulcro app, components do not request data from the app-db directly,
instead they receive data via arguments (aka "props") from their parent
components.

To get data from the app-db into the UI, Fulcro constructs an EQL[1] query
starting from the Root component and adds the queries of each of Root's child
components.

Fulcro then retrieves the results from the app-db and hands the full tree of
data to the Root component which plucks off the data it needs and then hands the
props to it's children who do the same.

Fulco uses a query language called EQL (EQL stands for EDN Query Language which
is similar to GraphQL and implemented via the Pathom library) to retrieve data
from the Fulcro database and construct the tree of data that is given to the
Root component.

Understanding how this process works is key to understanding Fulcro
and unlocking the benefits of this approach.

* Most Basic Fulcro App

To explore these ideas, we'll use a simplified Fulcro app so we can focus on
these key elements and to avoid any unnecessary distractions in the code.

Footnote:
The Fulcro project provides two good starting templates one called
[[https://github.com/fulcrologic/fulcro-template][fulcro-template]] and the other one is the [[https://github.com/fulcrologic/fulcro-rad-demo][fulcro RAD demo]]. The Fulcro template is
a good starting point if you want to use vanilla Fulcro but the Fulcro RAD Demo
is currently the recommended starting point for projects as of September 2020.

We'll use the fulcro-template as the starting point for our project.

<Note:: Consider using workspaces to demonstrate ideas because it's so much less complicated>

Footnote: In November 2019, Tony Kay and the Fulcro team pushed the first commit of
Fulcro RAD (for "Rapid Application Development"). Fulcro is a set of
libraries which live on top of the base Fulcro project and provide a number
of useful features for quickly standing up a Fulcro-based single page
application. All features of Fulcro RAD are completely optional and don't
require you to commit to the RAD way of doing things. Also, any RAD features
can be dropped in favour of home-grown solutions where necessary. Once you
have a handle on the basics, Fulcro RAD Demo is the recommended starting
point for new Fulcro applications.
    
* Structure of the Fulcro App-DB

Before getting into how to get data in and out of the Fulcro app-db we need to
understand few important details about the app-db structure.

- First, the app-db is structured as a graph database which is well suited to the kind of
  hierarchical data that is common in UI code.
- Second, the app-db is *normalized* to ensure data consistency and avoid caching
  issues.
- Third, access to the app-db is via EDN Query Language (EQL) which is the
  same query language used to communicate with remote servers in Fulcro.

So what does a typical Fulcro app-db look like? Let's say that we want to create
a todo application with the following data:

#+BEGIN_SRC

Personal Todos List:
=================================
- Buy Milk          (not started)
- Cook dinner       (not started)
- Mail letter       (not started)

Work Todo List:
=================================
- Write TPS report  (not started)
- Send Emails       (not started)
- Have Meeting      (not started)

#+END_SRC

If we were to create a simple data structure to represent this data using
clojure maps and vectors we might come up with something like this:

Table: Simple Data Structure
#+BEGIN_SRC clojure

  {:all-todo-lists
   [{:list/id 1
     :list/name "Personal"
     :list/items [{:item/id 1
                   :item/label "Buy Milk"
                   :item/status :notstarted}
                  {:item/id 2
                   :item/label "Cook Dinner"
                   :item/status :notstarted}
                  {:item/id 3
                   :item/label "Mail Letter"
                   :item/status :notstarted}]}
    {:list/id 2
     :list/name "Work"
     :list/items [{:item/id 4
                   :item/label "Write TPS Report"
                   :item/status :notstarted}
                  {:item/id 5
                   :item/label "Send Emails"
                   :item/status :notstarted}
                  {:item/id 6
                   :item/label "Have Meeting"
                   :item/status :notstarted}]}]}

#+END_SRC

At the root of the structure we have a map which has one key-value pair. The key
is `:all-todo-lists` and the value is a vector containing two maps which
represent the todo lists.

Each :todo-list map has an id, a name and a vector of `:list-items` (i.e. a
vector of maps representing todo items).

Each :todo-item has an id, a label and a status.

** Normalization

While this is not exactly how Fulcro organizes the app-db we're on the right
track.

To get closer we need to add normalization which will make sure that we can
avoid problem with duplicate data and caching.

Normalization is a concept that has been around since databases were
invented.  Normalization organizes the data so that each item only
appears once. This is accomplished by using tables and references or
"pointers". I could go into a long description of database
normalization techniques but it's is probably easier to explain by
simply normalizing our example data:

Table: Normalized Simple Data Structure
#+BEGIN_SRC clojure

  {:LIST {1 {:list/id 1
             :list/name "Personal"
             :list/items [[:ITEM 1] [:ITEM 2] [:ITEM 3]]}
          2 {:list/id 2
             :list/name "Work"
             :list/items [[:ITEM 4] [:ITEM 5] [:ITEM 6]]}}
   :ITEM {1 {:item/id 1
             :item/label "Buy Milk"
             :item/status :notstarted}
          2 {:item/id 2
             :item/label "Cook Dinner"
             :item/status :notstarted}
          3 {:item/id 3
             :item/label "Mail Letter"
             :item/status :notstarted}
          4 {:item/id 4
             :item/label "Write TPS Report"
             :item/status :notstarted}
          5 {:item/id 5
             :item/label "Send Emails"
             :item/status :notstarted}
          6 {:item/id 6
             :item/label "Have Meeting"
             :item/status :notstarted}}}

#+END_SRC

As I'm sure you can see, all we have done is to take the nested :list(s) and
:item(s) and we've put them in their own section or "table" with "pointers"
to sub-items indicating the original database structure.

Notice a couple of things about our newly normalized data structure:

- The data structure is formed with a mix of clojure maps and vectors and they
  behave like maps and vectors would in a regular clojure program.
- Each individual grouping of data can be uniquely identified by its id
- When a property (e.g. :list/items) refers to more than one thing we can use a
  vector of vectors to define a "to-many" relationship:

#+BEGIN_SRC clojure

{:list/id  2
 :list/name "Work"
 :list/items [[:ITEM 4] [:ITEM 5] [:ITEM 6]]}
          ;; ↑
          ;; a vector of vectors defines a "to-many" relationship

#+END_SRC

Now, all data is on the same level and each node lives in its own table along
with all the other nodes that are similar to it.

This normalized format has some interesting properties:

- It supports any arbitrary graph of data
- It supports "to-one" relationships as in "a list can have one item"
- It supports "to-many" relationships as in "a list can have many items"
- It is quite easy to find and add items because everything is on "one level"
- It automatically ensures that you only have one place for each piece of data

It's useful to name the different pieces of our little graph database because
we'll use these terms later on when talking about queries.

Note: These names are conceptual ideas - they are not elements that we will use
in our Fulcro apps but they are are mentioned in the Fulcro documentation and
they are handy for thinking about the app-db.

Anything that has a distinct ID is called a *"node"*. An example node from our
above example would be:

#+BEGIN_SRC clojure
  ;; This whole thing is a node:

  {  1 {:list/id 1
        :list/name "Personal"
        :list/items [[:ITEM 1] [:ITEM 2] [:ITEM 3]]}

  ;; And this is a different node:

  {  1 {:item/id 1
        :item/label "Buy Milk"
        :item/status :notstarted}}

  ;; NOTE: All nodes in the same table must have distinct IDs.

  ;; Although the above two items are keyed with the same number, 1,
  ;; and they have the same ~:item/id~, they belong to separate tables
  ;; so we aren't violating the distinct IDs requirement.

#+END_SRC

At various points, the Fulcro documentation refers to *"entities"* which are
are the "value" part of a key-value pair that makes up a node. For example:

#+BEGIN_SRC clojure
;; The node is the map including the ID
;; ↓
;; ↓  This is the ID, or key
;; ↓  ↓
   {  1 {:item/id 1
         :item/label "Buy Milk"
         :item/status :notstarted}}
;;       ↑
;; The entity is the value part of the map
#+END_SRC

Nodes are stored in *"tables"* (in the above example the tables are :LIST and
:ITEM)

*"Edges"* are the pointers in our data graph and they are represented as vectors
and have the form: [TABLE ID] (e.g. `[:LIST 2]` or `[:ITEM 5]`).

** Idents

Now that we have an understanding of the structure of the app-db the only
missing piece that Fulcro needs is a way to correctly build the pointer that
links nodes to other tables. We do this by supplying Fulcro with an *ident*.
Idents serve two purposes:

1) Idents allow us to uniquely identify a node in the database for queries.
2) Idents tell Fulcro where to add new nodes when we add items to the app-db
   (i.e. in which table should this node live?)

You can think of idents as being the thing that allows Fulcro to normalize the
app-db (without idents Fulcro would not know what to call the tables).

As I mentioned earlier *idents* have the form [TABLE ID] (e.g. `[:LIST 2]`
`[:ITEM 5]`)

When we create components (using the defsc macro) we need to tell Fulcro what
the ident should be. You can use anything you want for your idents but the
convention is to use the name of the ID field of the entity. In our above
example we used :LIST and :ITEM but for a real Fulcro application we would use
:list/id and :item/id as the idents because they are id fields of the entity.
Don't worry too much if this doesn't make sense right away as we'll go over it
again when we start to build ui components.

??? When to use which type of ident?

#+begin_src clojure

;; There are 3 forms for creating an ident - all equivalent.

;; Keyword form (the simplest and the recommended form)
;; the ident is the same as the id of the component
(defsc TodoItem [this {:todo/keys [id label status]} :as props]
{:ident :todo/id}
  ...
    )

;; Vector :ident template
;;
(defsc TodoItem [this {:todo/keys [id label status]} :as props]
{:ident [:todo/id :todo/id]}
  ...
    )

;; Lambda :ident template
;;
(defsc TodoItem [this {:todo/keys [id label status]} :as props]
{:ident (fn [_] [:component/id :todo]) }
  ...
    )
#+end_src

* Fulcro Queries

Other than the app-db, understanding EQL and Pathom are the other most important
skills you will need to understand when starting out with Fulcro.

- Brief introduction to EQL and how it is like GraphQL

EQL stands for "EDN Query Language" and EDN stands for "Extensible Data
Notation". You can think of EDN as a clojure-centric version of JSON and EQL as
a clojure-centric version of GraphQL. For more details on each, I've left links
in the references section at the end of this post.

To understand EQL it's useful to understand why GraphQL was developed. GraphQL
was introduced by Facebook as an alternative to RESTful architectures. It is a
structured query language for querying and mutating data and it uses JSON as
it's serialization format. The benefit of GraphQL you don't need to define your
server-side end-points, you can just expose your GraphQL runtime and your
clients query for the data that they need.

EQL has similar goals and allows you to query for and mutate data but it uses
EDN as its serialization format which is a better fit for clojure(script) apps
because it uses the same clojure data structures that we're familiar with
namely, keywords, vectors and maps.

EQL itself is just a specification and so it needs an implementation to use it
in real-world applications. One such implementation of EQL is Pathom and it is
used to communicate with both the client app-db and with remote servers.

- High-level explanation of using EQL to access data in the app-db

In EQL, we form queries using *vectors* listing the things that you want. Using
our example todo list data from above, the following query run against a list:

!! FIXME !! Convert to todo/items example:

Table: Example Query
#+BEGIN_SRC clojure

[{:main/todos [:todo/label]}]

#+END_SRC

...returns a *map* with the things we want:

Table: Example Query Result
#+BEGIN_SRC clojure

{:list/name "Work"
 :list/items [{:item/label "Write TPS Report"}
              {:item/label "Send Emails"}
              {:item/label "Have Meeting"}]}

#+END_SRC

FIXME: how do we specify a parameter in a EQL query? I.e. how do we get the
"Work" list rather than the "Personal" list?

Notice a couple things in the above example query:

- Because :list/items refers to a different table in the app-db (in this case
  the :ITEM table) we need to use a 'join' represented by use of a clojure map
  `{}` before the keyword :main/todos.
- Because `:list/items` is a "to-many" relationship, we get multiple items in
  the result.


- How do queries map to values in the app-db
`:query` says "Here's the data I need and where you'll be able to find it."

- How to show the contents of the app-db in the repl:

#+BEGIN_SRC clojure

(com.fulcrologic.fulcro.application/current-state app.client/APP)

;; !!NB!! If you are getting an ":undeclared-var" warning here, check the
;; troubleshooting section for hints.
#+END_SRC
============================================================================================================================
- How to query the app-db from the repl? (adapted from 3.6.3 in the fulcro book)

#+BEGIN_SRC clojure

dev:cljs.user=> (fdn/db->tree [{:main/todos [:todo/label]}] (comp/get-initial-state app.client/Main {}) {})

;; With only 1 item in the :initial-state of TodoItem:

(fdn/db->tree [{:main/todos [:todo/label]}] (comp/get-initial-state app.client/Main {}) {})
=> #:main{:todos #:todo{:label "Get Milk"}}

;; After adding an item to :initial-state of TodoItem the same query returns muliple items:

(fdn/db->tree [{:main/todos [:todo/label]}] (comp/get-initial-state app.client/Main {}) {})
=> #:main{:todos [#:todo{:label "Get Milk"} #:todo{:label "Post Letter"}]}

#+END_SRC

- Are we able to query for a specific thing in the app-db i.e. [:list/name "Work"]

- How to add something to the app-db from the repl? add something at a
  particular place?
- Can you use the fulcro inspector to perform a query on the app-db? or does it
  only work with remotes?

Questions::
- Are queries required when defining a component using defsc? if yes, why?

* Basic Components and the defsc macro

Putting it all together

defsc is complicated and does many different things for you. When starting out I
found it helpful to break down what defsc is doing for you and the process that
fulcro goes through to render stuff to the browser.

** Step 1: Rendering a Single Component by supplying props

Reference: https://youtu.be/XdLIKOJ4rKg?t=582

** Step 2: Rendering Nested Components with Initial State


Questions::

Does initial state need to be enclosed in a vector?

#+BEGIN_SRC clojure

:initial-state (fn [_]
                 {:list/id    1
                  :list/label "Work"
                  :list/items (comp/get-initial-state TodoItem)})

;; Is this a valid initial state?? it does not have a vector surrounding the map

#+END_SRC

Where to put the following paragraph?? :

I think of fulcro rendering as a two-step process: first, it walks the hierarchy
of your components and constructs a full pathom query from each of the "query
fragments" contained in each of the components `:query` section. It then
performs the query and hands the data it received to the root component which
hands it to it's children.

** Step 3: Multiple Components with Queries, Idents and Initial State

Idents can be computed or static.

Computed idents are the most common and they have some different ways to write
them:

The first way is the longhand format:

#+BEGIN_SRC clojure

{
 :ident (fn [] [:person/id (:person/id props)])
}

#+END_SRC

This says: "To compute the ident for an individual node, look up the :person/id
in the props you receive for this instance and return the ident [:person/id
<ID>]". In practice this would return something like `[:person/id 43]`.

The other common form of computed idents is the shorthand version of the above:

#+BEGIN_SRC clojure

{
 :ident :person/id
}

#+END_SRC


Static Idents

If you know that there will only be one of a particular type of component then
you can give the component a `static ident`. This is often used for things like
components that render ui panes or other 'singletons'.

The format for a `static ident` would be something like this:

#+BEGIN_SRC clojure

:ident (fn [] [:component/id :lists-pane])

#+END_SRC

In this case we're saying that the table is `:component/id` and the id is
`:lists`.

* Getting Stuff into the App-DB

* Getting Stuff out of the App-DB

* Troubleshooting

Getting stuck is one of the most frustrating parts of learning to code and
fulcro is no different here. While developing this guide, I got stuck many times
and I documented the issues below so you have some hints to help get "un-stuck"
as quickly as possible.

** Warning :undeclared-var

This is a more general clojure(script) problem than it is a fulcro problem but
it's useful to note it here as it comes up quite often for me.

When working at the repl, I often forget to load the current file which will
give you access to all the functions and vars in the namespace. For example:

#+BEGIN_SRC clojure

=>(com.fulcrologic.fulcro.application/current-state app.client/APP)
------ WARNING - :undeclared-var -----------------------------------------------
Resource: <eval>:1:51
Use of undeclared Var cljs.user/app
--------------------------------------------------------------------------------
;; stare at the screen for a while then groan and realize that you didn't load the file in the repl
Loading src/app/client.cljs... done
=>(com.fulcrologic.fulcro.application/current-state app.client/APP)
=>{:fulcro.inspect.core/app-id "app.client/Main",
   :main/todos [:todo/id 1],
   :todo/id {1 #:todo{:id 1, :label "Get Milk", :status :notstarted}},
   :fulcro.inspect.core/app-uuid #uuid"8e6374ee-6691-43a5-93e3-1ef02dbd8123"}

#+END_SRC

** :initial-state not appearing in the app-db

When starting out with fulcro I often ran into the problem where the initial
state from my components were not getting into the app-db. The problem was
mostly due to not having the :query or :initial-state setup properly.

Remember that both the query and initial state have to be "composed from root"
which means that there needs to be a connected "chain" from the root component
to the child components using (comp/get-initial-state ComponentName) for
:initial-state or (comp/get-query ComponentName) for :query

#+begin_src clojure
;; The correct way:
;; The root component "Main" has a :query that links to
;; the query of TodoItem using (comp/get-query TodoItem)
;;
;; "Main" has an :initial-state that links to the :initial-state of TodoItem
;; using (comp/get-initial-state TodoItem)

(defsc TodoItem [this {:todo/keys [id label status] :as props}]
  {:query         [:todo/id :todo/label :todo/status]
   :ident         :todo/id
   :initial-state (fn [params]
                    {:todo/id     1
                     :todo/label  "Get Milk"
                     :todo/status :notstarted})}
  (dom/div
   (dom/li label (str " (" status ")"))))

(def ui-todoitem (comp/factory TodoItem))

(defsc Main [this {:main/keys [todos] :as props}]
  {:query         [{:main/todos (comp/get-query TodoItem)}]
   :initial-state (fn [_]
                    {:main/todos (comp/get-initial-state TodoItem)})}
  (dom/div
   (dom/div
    (dom/h3 "Root Props: " (str props))
    (dom/h3 "Items: " (ui-todoitem todos)))))

;; INCORRECT
;; :query and :initial-state do not compose from the root component

(defsc TodoItem [this {:todo/keys [id label status] :as props}]
  {:query         [:todo/id :todo/label :todo/status]
   :ident         :todo/id
   :initial-state (fn [params]
                    {:todo/id     1
                     :todo/label  "Get Milk"
                     :todo/status :notstarted})}
  (dom/div
   (dom/li label (str " (" status ")"))))

(def ui-todoitem (comp/factory TodoItem))

(defsc Main [this props]
  {}
  (dom/div
   (dom/div
    (dom/h3 "Root Props: " (str props))
    (dom/h3 "Items: " (ui-todoitem todos)))))

#+end_src

** props not appearing in the component when rendered

My experience is that this is caused by 3 main issues:

1) Not destructuring the props from the argument list
2) Not refreshing the app to refresh :initial-state
3) Not passing props to the child to be rendered

Let's look at the first case in more detail. It's easy to assume that the
component has the data it needs from the :query or :initial-state but that is
not how components receive their state at render time. Components receive their
data as props from their parent which means that they need to be de-structured
from the argument list like this:

#+begin_src clojure
;; The right way
(defsc TodoItem [this {:todo/keys [id label status] :as props}] ;;todo/id todo/label todo/status destructured
  {:query         [:todo/id :todo/label :todo/status]           ;;from props received from parent
   :ident         :todo/id
   :initial-state (fn [params]
                    {:todo/id     1
                     :todo/label  "Get Milk"
                     :todo/status :notstarted})}
  (dom/div
   (dom/li label (str " (" status ")"))))                       ;; props are now available at render time.

#+end_src

The second case is much easier to solve. Fulcro does not "hot-code reload"
:initial-state so if you have tweaked :intial-state of any of your components
you will need to reload your application with the browser's refresh button for
fulcro to register and render the new :initial-state.

I've run into a few cases where I have forgotten to pass the props to the child
component:

#+begin_src clojure

(defsc Main [this {:main/keys [todos] :as props}]
  {:query         [{:main/todos (comp/get-query TodoItem)}]
   :initial-state (fn [_]
                    {:main/todos (comp/get-initial-state TodoItem)})}
  (dom/div
   (dom/div
    (dom/h3 "Items: " (ui-todoitem ))))) ;; oops! props need to be passed to ui-todoitem

#+end_src

* Footnotes

* References

Fulcro:
Fulcro 3 Developer Guide: http://book.fulcrologic.com/

EDN and EQL:
EDN (Extensible Data Notation): https://github.com/edn-format/edn
EQL (EDN Query Language): https://github.com/edn-query-language/eql

Pathom:
Pathom : https://github.com/wilkerlucio/pathom
